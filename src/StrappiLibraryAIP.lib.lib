import("stdfaust.lib");

declare name "StrappiLibraryAIP";
declare author "Giulio Romano De Mattia";
declare copyright "Giulio Romano De Mattia 2024 ©";
declare version "1.00";
declare license "MIT"; 
//======================================================================================================
//                                          PATCH
mainPatch(x) = hgroup("Main",x);
group(x) = hgroup("INPUT-general",x);
subgroup(x) = hgroup("[0]input",x);
//======================================================================================================




//======================================================================================================
//                                          INPUT

input = par(i,2,(_ <: attach(_,abs : ba.linear2db : mainPatch(group(subgroup(vbargraph("Level %i",-60,0)))))));
//-----------
inputMid = _,_ : + : (_ <: attach(_,abs : ba.linear2db : mainPatch(group(vbargraph("[2]Input Mid",-60,0)))));
//-----------
rmsInputVis(timeRMS) = (_ : movingAverageRMS(timeRMS) <: attach(_,abs : ba.linear2db : mainPatch(group(vbargraph("[3]RMS",-60,0)))));
//-----------
peakInputVis(timePeak) = (_ : peakenvelope(timePeak) <: attach(_,abs : ba.linear2db : mainPatch(group(vbargraph("[4]Peak",-60,0)))));
//-----------
picchiMediaInputVis(peakTime,peakTresh,secCounter,timeSmooth) = (_ : frequenzaPicchi(peakTime,peakTresh,secCounter,timeSmooth) <: attach(_,abs : ba.linear2db : mainPatch(group(vbargraph("[5]f-Picchi[style:numerical][tooltip:frequenza media picchi campana]",-60,+20)))));
//======================================================================================================








//======================================================================================================
//                                      FILTRI E INTEGRATORI
delayFbk(s,fbk) = (+ : de.delay(ma.SR, ba.sec2samp(s)-1))~*(fbk);
//-----------
lp1p(g) = *(1-g):+~*(g);
twopi = 2*ma.PI;
omega(fc) = fc*twopi/ma.SR;
aapp(fc) = pow(ma.E, 0-omega(fc));
integrator(s) = abs : lp1p(aapp(1/s));

//-----------
BPTPTNormalized(gf, bw, cf, x) = loop ~ si.bus(2) : (! , ! , _ * gf)
    with {
        g = tan(cf * ma.PI * ma.T);
        R = 1.0 / (2.0 * bw);
        G1 = 1.0 / (1.0 + 2.0 * R * g + g * g);
        G2 = 2.0 * R + g;
        loop(s1, s2) = u1 , u2 , bp * 2.0 * R
            with {
                hp = (x - s1 * G2 - s2) * G1;
                v1 = hp * g;
                bp = s1 + v1;
                v2 = bp * g;
                lp = s2 + v2;
                u1 = v1 + bp;
                u2 = v2 + lp;
            };
    };
peakenvelope(period, x) = loop ~ _
    with {
        loop(y) = max(abs(x), y * coeff);
        twoPIforT = (2.0 * ma.PI) * (1.0 / ma.SR);
        coeff = exp(-twoPIforT / max(ma.EPSILON, period));
    };
peakHolder(holdTime, x) = loop ~ si.bus(2) : ! , _
with {
    loop(timerState, outState) = timer , output
    with {
        isNewPeak = abs(x) >= outState;
        isTimeOut = timerState >= (holdTime * ma.SR - 1);
        bypass = isNewPeak | isTimeOut;
        timer = ba.if(bypass, 0, timerState + 1);
        output = ba.if(bypass, abs(x), outState);
    };
};
movingAverage(seconds, x) = x - x@(seconds * ma.SR) : fi.pole(1) / (seconds * ma.SR);
movingAverageRMS(seconds, x) = sqrt(max(0, movingAverage(seconds, x ^ 2)));
//======================================================================================================





//======================================================================================================
//                                          TRESHOLD
diffTresh(x) = x > x';
//======================================================================================================





//======================================================================================================
//                                    FILTER BANK
bpBankFmul(freqDev,qFilBank) = si.bus(6): par(i,6,BPTPTNormalized(10,qFilBank,ba.take(i+1,freqList)*freqDev));
// funzione pressoché deprecata
//-----------
freqList = (713,1844,3284,4946,6788,7744);
//-----------
// c'è un gain maggiore negli ultimi filtri
bpBankPeakEnv = _ <: peakenvelope(.1, BPTPTNormalized(20, 1000, 713)), peakenvelope(.1, BPTPTNormalized(20, 1000, 1844)), peakenvelope(.1, BPTPTNormalized(10, 1000, 3284)), peakenvelope(.1, BPTPTNormalized(50, 1000, 4946)), peakenvelope(.1, BPTPTNormalized(100, 1000, 6788)), peakenvelope(.1, BPTPTNormalized(100, 1000, 7744));

bpDelEnv(fbTime,fbgI) = par(i,6,delayFbk(fbTime,fbgI/*(+i*0.05)*/));
//======================================================================================================











//======================================================================================================
//                                    OSCILLATORS

phasor(f)= (1/ma.SR)*f : + ~ %(1);
//======================================================================================================











//======================================================================================================
//                                          LINE    
line(value, trigger) = (feedf ~ feedb)
 with 
    {   
        break = value;
        y = trigger > trigger';
        feedf(x) = (x > 0) + (x * (x > 0)) + y;
        feedb(x) = (x <= break) * x;
        offset(x) = ((x - 1) > 0) * (x - 1);
    };
//======================================================================================================



//======================================================================================================
//                                          CONTATORE PICCHI

rilevatorePicchi(time,tresh) = (_ <: (peakenvelope(time) > tresh : (line(ma.SR*time) / (ma.SR*time)) > 0 : diffTresh));
//-----------
reset(sec)=phasor(1/sec)<1;
//-----------
counter(sec)=_:(+:*(reset(sec)))~_;
//-----------
/*counter(seconds,trig) = upfront(trig) : + ~ (_ * (0 : (+ ~ (_+(1/ba.sec2samp(seconds))) % 1) < .999))
    with {
        upfront(x) = x > x';
        };*/
//-----------
peakMaxTimer(secCounter) =  max ~ _ *reset(secCounter-ba.samp2sec(100)); 
//-----------
frequenzaPicchi(peakTime,peakTresh,secCounter,timeSmooth)=_:rilevatorePicchi(peakTime,peakTresh):counter(secCounter)/secCounter :
peakMaxTimer(secCounter):integrator(timeSmooth);
//-----------
// funzione pressoché deprecata
frequencyPeak(timeRP,treshRP, tA,tI) = rilevatorePicchi(timeRP,treshRP) : avg(tA) * ma.SR ;
//======================================================================================================